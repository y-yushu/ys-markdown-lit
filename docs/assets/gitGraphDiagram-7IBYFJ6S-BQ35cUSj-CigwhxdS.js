import{t as Y}from"./chunk-4BMEZGHF-B3-vk9LB-DPxT1ne6.js";import{r as K}from"./chunk-XZIHB7SX-BqAquc2P-DdX340Mo.js";import{p as d,x as U,w as V,d as J,f as Q,l as X,o as Z,F as u,h as tt,g as rt,u as et,I as ot,A as at,q as E,U as nt,Y as ct,J as it,M as st}from"./mermaid-BGotkrlZ.js";import{z as ht}from"./radar-MK3ICKWK-DAU449zM-jWZxnPiX.js";import"./index.vue_vue_type_script_setup_true_lang-DaU-t4Sx.js";import"./index-Dnfs_mlS.js";import"./ys-md-rendering.es-H-lS7OB8.js";import"./ref-4EgzFnS5-Dptg17he.js";import"./consume-CNX1KxBo-C4hJZ7c2.js";import"./_commonjsHelpers-C6fGbg64-BC8KDfbh.js";import"./Button-BNOVJuVY.js";import"./Table-7ex-xPvn.js";import"./_baseUniq-CcP6avan-BLqpIwzf.js";import"./_basePickBy-DNqsubjT-cmfbnW4E.js";import"./clone-Dbqn34BQ-BkKggzLU.js";var f={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},dt=it.gitGraph,P=d(()=>nt({...dt,...ct().gitGraph}),"getConfig"),s=new K(()=>{const r=P(),t=r.mainBranchName,a=r.mainBranchOrder;return{mainBranchName:t,commits:new Map,head:null,branchConfig:new Map([[t,{name:t,order:a}]]),branches:new Map([[t,null]]),currBranch:t,direction:"LR",seq:0,options:{}}});function O(){return st({length:7})}d(O,"getID");function D(r,t){const a=Object.create(null);return r.reduce((n,e)=>{const o=t(e);return a[o]||(a[o]=!0,n.push(e)),n},[])}d(D,"uniqBy");var mt=d(function(r){s.records.direction=r},"setDirection"),$t=d(function(r){u.debug("options str",r),r=r?.trim(),r=r||"{}";try{s.records.options=JSON.parse(r)}catch(t){u.error("error while parsing gitGraph options",t.message)}},"setOptions"),yt=d(function(){return s.records.options},"getOptions"),lt=d(function(r){let t=r.msg,a=r.id;const n=r.type;let e=r.tags;u.info("commit",t,a,n,e),u.debug("Entering commit:",t,a,n,e);const o=P();a=E.sanitizeText(a,o),t=E.sanitizeText(t,o),e=e?.map(c=>E.sanitizeText(c,o));const h={id:a||s.records.seq+"-"+O(),message:t,seq:s.records.seq++,type:n??f.NORMAL,tags:e??[],parents:s.records.head==null?[]:[s.records.head.id],branch:s.records.currBranch};s.records.head=h,u.info("main branch",o.mainBranchName),s.records.commits.set(h.id,h),s.records.branches.set(s.records.currBranch,h.id),u.debug("in pushCommit "+h.id)},"commit"),gt=d(function(r){let t=r.name;const a=r.order;if(t=E.sanitizeText(t,P()),s.records.branches.has(t))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);s.records.branches.set(t,s.records.head!=null?s.records.head.id:null),s.records.branchConfig.set(t,{name:t,order:a}),N(t),u.debug("in createBranch")},"branch"),pt=d(r=>{let t=r.branch,a=r.id;const n=r.type,e=r.tags,o=P();t=E.sanitizeText(t,o),a&&(a=E.sanitizeText(a,o));const h=s.records.branches.get(s.records.currBranch),c=s.records.branches.get(t),y=h?s.records.commits.get(h):void 0,m=c?s.records.commits.get(c):void 0;if(y&&m&&y.branch===t)throw new Error(`Cannot merge branch '${t}' into itself.`);if(s.records.currBranch===t){const i=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw i.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},i}if(y===void 0||!y){const i=new Error(`Incorrect usage of "merge". Current branch (${s.records.currBranch})has no commits`);throw i.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["commit"]},i}if(!s.records.branches.has(t)){const i=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");throw i.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},i}if(m===void 0||!m){const i=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");throw i.hash={text:`merge ${t}`,token:`merge ${t}`,expected:['"commit"']},i}if(y===m){const i=new Error('Incorrect usage of "merge". Both branches have same head');throw i.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},i}if(a&&s.records.commits.has(a)){const i=new Error('Incorrect usage of "merge". Commit with id:'+a+" already exists, use different custom Id");throw i.hash={text:`merge ${t} ${a} ${n} ${e?.join(" ")}`,token:`merge ${t} ${a} ${n} ${e?.join(" ")}`,expected:[`merge ${t} ${a}_UNIQUE ${n} ${e?.join(" ")}`]},i}const $=c||"",l={id:a||`${s.records.seq}-${O()}`,message:`merged branch ${t} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,$],branch:s.records.currBranch,type:f.MERGE,customType:n,customId:!!a,tags:e??[]};s.records.head=l,s.records.commits.set(l.id,l),s.records.branches.set(s.records.currBranch,l.id),u.debug(s.records.branches),u.debug("in mergeBranch")},"merge"),ft=d(function(r){let t=r.id,a=r.targetId,n=r.tags,e=r.parent;u.debug("Entering cherryPick:",t,a,n);const o=P();if(t=E.sanitizeText(t,o),a=E.sanitizeText(a,o),n=n?.map(y=>E.sanitizeText(y,o)),e=E.sanitizeText(e,o),!t||!s.records.commits.has(t)){const y=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw y.hash={text:`cherryPick ${t} ${a}`,token:`cherryPick ${t} ${a}`,expected:["cherry-pick abc"]},y}const h=s.records.commits.get(t);if(h===void 0||!h)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(e&&!(Array.isArray(h.parents)&&h.parents.includes(e)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const c=h.branch;if(h.type===f.MERGE&&!e)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!a||!s.records.commits.has(a)){if(c===s.records.currBranch){const l=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw l.hash={text:`cherryPick ${t} ${a}`,token:`cherryPick ${t} ${a}`,expected:["cherry-pick abc"]},l}const y=s.records.branches.get(s.records.currBranch);if(y===void 0||!y){const l=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw l.hash={text:`cherryPick ${t} ${a}`,token:`cherryPick ${t} ${a}`,expected:["cherry-pick abc"]},l}const m=s.records.commits.get(y);if(m===void 0||!m){const l=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw l.hash={text:`cherryPick ${t} ${a}`,token:`cherryPick ${t} ${a}`,expected:["cherry-pick abc"]},l}const $={id:s.records.seq+"-"+O(),message:`cherry-picked ${h?.message} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,h.id],branch:s.records.currBranch,type:f.CHERRY_PICK,tags:n?n.filter(Boolean):[`cherry-pick:${h.id}${h.type===f.MERGE?`|parent:${e}`:""}`]};s.records.head=$,s.records.commits.set($.id,$),s.records.branches.set(s.records.currBranch,$.id),u.debug(s.records.branches),u.debug("in cherryPick")}},"cherryPick"),N=d(function(r){if(r=E.sanitizeText(r,P()),s.records.branches.has(r)){s.records.currBranch=r;const t=s.records.branches.get(s.records.currBranch);t===void 0||!t?s.records.head=null:s.records.head=s.records.commits.get(t)??null}else{const t=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${r}")`);throw t.hash={text:`checkout ${r}`,token:`checkout ${r}`,expected:[`branch ${r}`]},t}},"checkout");function z(r,t,a){const n=r.indexOf(t);n===-1?r.push(a):r.splice(n,1,a)}d(z,"upsert");function H(r){const t=r.reduce((e,o)=>e.seq>o.seq?e:o,r[0]);let a="";r.forEach(function(e){e===t?a+="	*":a+="	|"});const n=[a,t.id,t.seq];for(const e in s.records.branches)s.records.branches.get(e)===t.id&&n.push(e);if(u.debug(n.join(" ")),t.parents&&t.parents.length==2&&t.parents[0]&&t.parents[1]){const e=s.records.commits.get(t.parents[0]);z(r,t,e),t.parents[1]&&r.push(s.records.commits.get(t.parents[1]))}else{if(t.parents.length==0)return;if(t.parents[0]){const e=s.records.commits.get(t.parents[0]);z(r,t,e)}}r=D(r,e=>e.id),H(r)}d(H,"prettyPrintCommitHistory");var xt=d(function(){u.debug(s.records.commits);const r=W()[0];H([r])},"prettyPrint"),ut=d(function(){s.reset(),at()},"clear"),bt=d(function(){return[...s.records.branchConfig.values()].map((r,t)=>r.order!==null&&r.order!==void 0?r:{...r,order:parseFloat(`0.${t}`)}).sort((r,t)=>(r.order??0)-(t.order??0)).map(({name:r})=>({name:r}))},"getBranchesAsObjArray"),wt=d(function(){return s.records.branches},"getBranches"),Bt=d(function(){return s.records.commits},"getCommits"),W=d(function(){const r=[...s.records.commits.values()];return r.forEach(function(t){u.debug(t.id)}),r.sort((t,a)=>t.seq-a.seq),r},"getCommitsArray"),Et=d(function(){return s.records.currBranch},"getCurrentBranch"),kt=d(function(){return s.records.direction},"getDirection"),Ct=d(function(){return s.records.head},"getHead"),j={commitType:f,getConfig:P,setDirection:mt,setOptions:$t,getOptions:yt,commit:lt,branch:gt,merge:pt,cherryPick:ft,checkout:N,prettyPrint:xt,clear:ut,getBranchesAsObjArray:bt,getBranches:wt,getCommits:Bt,getCommitsArray:W,getCurrentBranch:Et,getDirection:kt,getHead:Ct,setAccTitle:Z,getAccTitle:X,getAccDescription:Q,setAccDescription:J,setDiagramTitle:V,getDiagramTitle:U},Lt=d((r,t)=>{Y(r,t),r.dir&&t.setDirection(r.dir);for(const a of r.statements)Tt(a,t)},"populate"),Tt=d((r,t)=>{const a={Commit:d(n=>t.commit(Mt(n)),"Commit"),Branch:d(n=>t.branch(vt(n)),"Branch"),Merge:d(n=>t.merge(Pt(n)),"Merge"),Checkout:d(n=>t.checkout(Rt(n)),"Checkout"),CherryPicking:d(n=>t.cherryPick(It(n)),"CherryPicking")}[r.$type];a?a(r):u.error(`Unknown statement type: ${r.$type}`)},"parseStatement"),Mt=d(r=>({id:r.id,msg:r.message??"",type:r.type!==void 0?f[r.type]:f.NORMAL,tags:r.tags??void 0}),"parseCommit"),vt=d(r=>({name:r.name,order:r.order??0}),"parseBranch"),Pt=d(r=>({branch:r.branch,id:r.id??"",type:r.type!==void 0?f[r.type]:void 0,tags:r.tags??void 0}),"parseMerge"),Rt=d(r=>r.branch,"parseCheckout"),It=d(r=>({id:r.id,targetId:"",tags:r.tags?.length===0?void 0:r.tags,parent:r.parent}),"parseCherryPicking"),At={parse:d(async r=>{const t=await ht("gitGraph",r);u.debug(t),Lt(t,j)},"parse")},Gt=tt(),B=Gt?.gitGraph,T=10,M=40,k=4,C=2,v=8,b=new Map,w=new Map,A=30,R=new Map,G=[],L=0,g="LR",Ot=d(()=>{b.clear(),w.clear(),R.clear(),L=0,G=[],g="LR"},"clear"),F=d(r=>{const t=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof r=="string"?r.split(/\\n|\n|<br\s*\/?>/gi):r).forEach(a=>{const n=document.createElementNS("http://www.w3.org/2000/svg","tspan");n.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),n.setAttribute("dy","1em"),n.setAttribute("x","0"),n.setAttribute("class","row"),n.textContent=a.trim(),t.appendChild(n)}),t},"drawText"),_=d(r=>{let t,a,n;return g==="BT"?(a=d((e,o)=>e<=o,"comparisonFunc"),n=1/0):(a=d((e,o)=>e>=o,"comparisonFunc"),n=0),r.forEach(e=>{const o=g==="TB"||g=="BT"?w.get(e)?.y:w.get(e)?.x;o!==void 0&&a(o,n)&&(t=e,n=o)}),t},"findClosestParent"),qt=d(r=>{let t="",a=1/0;return r.forEach(n=>{const e=w.get(n).y;e<=a&&(t=n,a=e)}),t||void 0},"findClosestParentBT"),zt=d((r,t,a)=>{let n=a,e=a;const o=[];r.forEach(h=>{const c=t.get(h);if(!c)throw new Error(`Commit not found for key ${h}`);c.parents.length?(n=St(c),e=Math.max(n,e)):o.push(c),Dt(c,n)}),n=e,o.forEach(h=>{Nt(h,n,a)}),r.forEach(h=>{const c=t.get(h);if(c?.parents.length){const y=qt(c.parents);n=w.get(y).y-M,n<=e&&(e=n);const m=b.get(c.branch).pos,$=n-T;w.set(c.id,{x:m,y:$})}})},"setParallelBTPos"),Ht=d(r=>{const t=_(r.parents.filter(n=>n!==null));if(!t)throw new Error(`Closest parent not found for commit ${r.id}`);const a=w.get(t)?.y;if(a===void 0)throw new Error(`Closest parent position not found for commit ${r.id}`);return a},"findClosestParentPos"),St=d(r=>Ht(r)+M,"calculateCommitPosition"),Dt=d((r,t)=>{const a=b.get(r.branch);if(!a)throw new Error(`Branch not found for commit ${r.id}`);const n=a.pos,e=t+T;return w.set(r.id,{x:n,y:e}),{x:n,y:e}},"setCommitPosition"),Nt=d((r,t,a)=>{const n=b.get(r.branch);if(!n)throw new Error(`Branch not found for commit ${r.id}`);const e=t+a,o=n.pos;w.set(r.id,{x:o,y:e})},"setRootPosition"),Wt=d((r,t,a,n,e,o)=>{if(o===f.HIGHLIGHT)r.append("rect").attr("x",a.x-10).attr("y",a.y-10).attr("width",20).attr("height",20).attr("class",`commit ${t.id} commit-highlight${e%v} ${n}-outer`),r.append("rect").attr("x",a.x-6).attr("y",a.y-6).attr("width",12).attr("height",12).attr("class",`commit ${t.id} commit${e%v} ${n}-inner`);else if(o===f.CHERRY_PICK)r.append("circle").attr("cx",a.x).attr("cy",a.y).attr("r",10).attr("class",`commit ${t.id} ${n}`),r.append("circle").attr("cx",a.x-3).attr("cy",a.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${n}`),r.append("circle").attr("cx",a.x+3).attr("cy",a.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${n}`),r.append("line").attr("x1",a.x+3).attr("y1",a.y+1).attr("x2",a.x).attr("y2",a.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${n}`),r.append("line").attr("x1",a.x-3).attr("y1",a.y+1).attr("x2",a.x).attr("y2",a.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${n}`);else{const h=r.append("circle");if(h.attr("cx",a.x),h.attr("cy",a.y),h.attr("r",t.type===f.MERGE?9:10),h.attr("class",`commit ${t.id} commit${e%v}`),o===f.MERGE){const c=r.append("circle");c.attr("cx",a.x),c.attr("cy",a.y),c.attr("r",6),c.attr("class",`commit ${n} ${t.id} commit${e%v}`)}o===f.REVERSE&&r.append("path").attr("d",`M ${a.x-5},${a.y-5}L${a.x+5},${a.y+5}M${a.x-5},${a.y+5}L${a.x+5},${a.y-5}`).attr("class",`commit ${n} ${t.id} commit${e%v}`)}},"drawCommitBullet"),jt=d((r,t,a,n)=>{if(t.type!==f.CHERRY_PICK&&(t.customId&&t.type===f.MERGE||t.type!==f.MERGE)&&B?.showCommitLabel){const e=r.append("g"),o=e.insert("rect").attr("class","commit-label-bkg"),h=e.append("text").attr("x",n).attr("y",a.y+25).attr("class","commit-label").text(t.id),c=h.node()?.getBBox();if(c&&(o.attr("x",a.posWithOffset-c.width/2-C).attr("y",a.y+13.5).attr("width",c.width+2*C).attr("height",c.height+2*C),g==="TB"||g==="BT"?(o.attr("x",a.x-(c.width+4*k+5)).attr("y",a.y-12),h.attr("x",a.x-(c.width+4*k)).attr("y",a.y+c.height-12)):h.attr("x",a.posWithOffset-c.width/2),B.rotateCommitLabel))if(g==="TB"||g==="BT")h.attr("transform","rotate(-45, "+a.x+", "+a.y+")"),o.attr("transform","rotate(-45, "+a.x+", "+a.y+")");else{const y=-7.5-(c.width+10)/25*9.5,m=10+c.width/25*8.5;e.attr("transform","translate("+y+", "+m+") rotate(-45, "+n+", "+a.y+")")}}},"drawCommitLabel"),Ft=d((r,t,a,n)=>{if(t.tags.length>0){let e=0,o=0,h=0;const c=[];for(const y of t.tags.reverse()){const m=r.insert("polygon"),$=r.append("circle"),l=r.append("text").attr("y",a.y-16-e).attr("class","tag-label").text(y),i=l.node()?.getBBox();if(!i)throw new Error("Tag bbox not found");o=Math.max(o,i.width),h=Math.max(h,i.height),l.attr("x",a.posWithOffset-i.width/2),c.push({tag:l,hole:$,rect:m,yOffset:e}),e+=20}for(const{tag:y,hole:m,rect:$,yOffset:l}of c){const i=h/2,x=a.y-19.2-l;if($.attr("class","tag-label-bkg").attr("points",`
      ${n-o/2-k/2},${x+C}  
      ${n-o/2-k/2},${x-C}
      ${a.posWithOffset-o/2-k},${x-i-C}
      ${a.posWithOffset+o/2+k},${x-i-C}
      ${a.posWithOffset+o/2+k},${x+i+C}
      ${a.posWithOffset-o/2-k},${x+i+C}`),m.attr("cy",x).attr("cx",n-o/2+k/2).attr("r",1.5).attr("class","tag-hole"),g==="TB"||g==="BT"){const p=n+l;$.attr("class","tag-label-bkg").attr("points",`
        ${a.x},${p+2}
        ${a.x},${p-2}
        ${a.x+T},${p-i-2}
        ${a.x+T+o+4},${p-i-2}
        ${a.x+T+o+4},${p+i+2}
        ${a.x+T},${p+i+2}`).attr("transform","translate(12,12) rotate(45, "+a.x+","+n+")"),m.attr("cx",a.x+k/2).attr("cy",p).attr("transform","translate(12,12) rotate(45, "+a.x+","+n+")"),y.attr("x",a.x+5).attr("y",p+3).attr("transform","translate(14,14) rotate(45, "+a.x+","+n+")")}}}},"drawCommitTags"),_t=d(r=>{switch(r.customType??r.type){case f.NORMAL:return"commit-normal";case f.REVERSE:return"commit-reverse";case f.HIGHLIGHT:return"commit-highlight";case f.MERGE:return"commit-merge";case f.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Yt=d((r,t,a,n)=>{const e={x:0,y:0};if(r.parents.length>0){const o=_(r.parents);if(o){const h=n.get(o)??e;return t==="TB"?h.y+M:t==="BT"?(n.get(r.id)??e).y-M:h.x+M}}else return t==="TB"?A:t==="BT"?(n.get(r.id)??e).y-M:0;return 0},"calculatePosition"),Kt=d((r,t,a)=>{const n=g==="BT"&&a?t:t+T,e=g==="TB"||g==="BT"?n:b.get(r.branch)?.pos,o=g==="TB"||g==="BT"?b.get(r.branch)?.pos:n;if(o===void 0||e===void 0)throw new Error(`Position were undefined for commit ${r.id}`);return{x:o,y:e,posWithOffset:n}},"getCommitPosition"),S=d((r,t,a)=>{if(!B)throw new Error("GitGraph config not found");const n=r.append("g").attr("class","commit-bullets"),e=r.append("g").attr("class","commit-labels");let o=g==="TB"||g==="BT"?A:0;const h=[...t.keys()],c=B?.parallelCommits??!1,y=d(($,l)=>{const i=t.get($)?.seq,x=t.get(l)?.seq;return i!==void 0&&x!==void 0?i-x:0},"sortKeys");let m=h.sort(y);g==="BT"&&(c&&zt(m,t,o),m=m.reverse()),m.forEach($=>{const l=t.get($);if(!l)throw new Error(`Commit not found for key ${$}`);c&&(o=Yt(l,g,o,w));const i=Kt(l,o,c);if(a){const x=_t(l),p=l.customType??l.type,q=b.get(l.branch)?.index??0;Wt(n,l,i,x,q,p),jt(e,l,i,o),Ft(e,l,i,o)}g==="TB"||g==="BT"?w.set(l.id,{x:i.x,y:i.posWithOffset}):w.set(l.id,{x:i.posWithOffset,y:i.y}),o=g==="BT"&&c?o+M:o+M+T,o>L&&(L=o)})},"drawCommits"),Ut=d((r,t,a,n,e)=>{const o=(g==="TB"||g==="BT"?a.x<n.x:a.y<n.y)?t.branch:r.branch,h=d(y=>y.branch===o,"isOnBranchToGetCurve"),c=d(y=>y.seq>r.seq&&y.seq<t.seq,"isBetweenCommits");return[...e.values()].some(y=>c(y)&&h(y))},"shouldRerouteArrow"),I=d((r,t,a=0)=>{const n=r+Math.abs(r-t)/2;if(a>5)return n;if(G.every(o=>Math.abs(o-n)>=10))return G.push(n),n;const e=Math.abs(r-t);return I(r,t-e/5,a+1)},"findLane"),Vt=d((r,t,a,n)=>{const e=w.get(t.id),o=w.get(a.id);if(e===void 0||o===void 0)throw new Error(`Commit positions not found for commits ${t.id} and ${a.id}`);const h=Ut(t,a,e,o,n);let c="",y="",m=0,$=0,l=b.get(a.branch)?.index;a.type===f.MERGE&&t.id!==a.parents[0]&&(l=b.get(t.branch)?.index);let i;if(h){c="A 10 10, 0, 0, 0,",y="A 10 10, 0, 0, 1,",m=10,$=10;const x=e.y<o.y?I(e.y,o.y):I(o.y,e.y),p=e.x<o.x?I(e.x,o.x):I(o.x,e.x);g==="TB"?e.x<o.x?i=`M ${e.x} ${e.y} L ${p-m} ${e.y} ${y} ${p} ${e.y+$} L ${p} ${o.y-m} ${c} ${p+$} ${o.y} L ${o.x} ${o.y}`:(l=b.get(t.branch)?.index,i=`M ${e.x} ${e.y} L ${p+m} ${e.y} ${c} ${p} ${e.y+$} L ${p} ${o.y-m} ${y} ${p-$} ${o.y} L ${o.x} ${o.y}`):g==="BT"?e.x<o.x?i=`M ${e.x} ${e.y} L ${p-m} ${e.y} ${c} ${p} ${e.y-$} L ${p} ${o.y+m} ${y} ${p+$} ${o.y} L ${o.x} ${o.y}`:(l=b.get(t.branch)?.index,i=`M ${e.x} ${e.y} L ${p+m} ${e.y} ${y} ${p} ${e.y-$} L ${p} ${o.y+m} ${c} ${p-$} ${o.y} L ${o.x} ${o.y}`):e.y<o.y?i=`M ${e.x} ${e.y} L ${e.x} ${x-m} ${c} ${e.x+$} ${x} L ${o.x-m} ${x} ${y} ${o.x} ${x+$} L ${o.x} ${o.y}`:(l=b.get(t.branch)?.index,i=`M ${e.x} ${e.y} L ${e.x} ${x+m} ${y} ${e.x+$} ${x} L ${o.x-m} ${x} ${c} ${o.x} ${x-$} L ${o.x} ${o.y}`)}else c="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",m=20,$=20,g==="TB"?(e.x<o.x&&(a.type===f.MERGE&&t.id!==a.parents[0]?i=`M ${e.x} ${e.y} L ${e.x} ${o.y-m} ${c} ${e.x+$} ${o.y} L ${o.x} ${o.y}`:i=`M ${e.x} ${e.y} L ${o.x-m} ${e.y} ${y} ${o.x} ${e.y+$} L ${o.x} ${o.y}`),e.x>o.x&&(c="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",m=20,$=20,a.type===f.MERGE&&t.id!==a.parents[0]?i=`M ${e.x} ${e.y} L ${e.x} ${o.y-m} ${y} ${e.x-$} ${o.y} L ${o.x} ${o.y}`:i=`M ${e.x} ${e.y} L ${o.x+m} ${e.y} ${c} ${o.x} ${e.y+$} L ${o.x} ${o.y}`),e.x===o.x&&(i=`M ${e.x} ${e.y} L ${o.x} ${o.y}`)):g==="BT"?(e.x<o.x&&(a.type===f.MERGE&&t.id!==a.parents[0]?i=`M ${e.x} ${e.y} L ${e.x} ${o.y+m} ${y} ${e.x+$} ${o.y} L ${o.x} ${o.y}`:i=`M ${e.x} ${e.y} L ${o.x-m} ${e.y} ${c} ${o.x} ${e.y-$} L ${o.x} ${o.y}`),e.x>o.x&&(c="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",m=20,$=20,a.type===f.MERGE&&t.id!==a.parents[0]?i=`M ${e.x} ${e.y} L ${e.x} ${o.y+m} ${c} ${e.x-$} ${o.y} L ${o.x} ${o.y}`:i=`M ${e.x} ${e.y} L ${o.x-m} ${e.y} ${c} ${o.x} ${e.y-$} L ${o.x} ${o.y}`),e.x===o.x&&(i=`M ${e.x} ${e.y} L ${o.x} ${o.y}`)):(e.y<o.y&&(a.type===f.MERGE&&t.id!==a.parents[0]?i=`M ${e.x} ${e.y} L ${o.x-m} ${e.y} ${y} ${o.x} ${e.y+$} L ${o.x} ${o.y}`:i=`M ${e.x} ${e.y} L ${e.x} ${o.y-m} ${c} ${e.x+$} ${o.y} L ${o.x} ${o.y}`),e.y>o.y&&(a.type===f.MERGE&&t.id!==a.parents[0]?i=`M ${e.x} ${e.y} L ${o.x-m} ${e.y} ${c} ${o.x} ${e.y-$} L ${o.x} ${o.y}`:i=`M ${e.x} ${e.y} L ${e.x} ${o.y+m} ${y} ${e.x+$} ${o.y} L ${o.x} ${o.y}`),e.y===o.y&&(i=`M ${e.x} ${e.y} L ${o.x} ${o.y}`));if(i===void 0)throw new Error("Line definition not found");r.append("path").attr("d",i).attr("class","arrow arrow"+l%v)},"drawArrow"),Jt=d((r,t)=>{const a=r.append("g").attr("class","commit-arrows");[...t.keys()].forEach(n=>{const e=t.get(n);e.parents&&e.parents.length>0&&e.parents.forEach(o=>{Vt(a,t.get(o),e,t)})})},"drawArrows"),Qt=d((r,t)=>{const a=r.append("g");t.forEach((n,e)=>{const o=e%v,h=b.get(n.name)?.pos;if(h===void 0)throw new Error(`Position not found for branch ${n.name}`);const c=a.append("line");c.attr("x1",0),c.attr("y1",h),c.attr("x2",L),c.attr("y2",h),c.attr("class","branch branch"+o),g==="TB"?(c.attr("y1",A),c.attr("x1",h),c.attr("y2",L),c.attr("x2",h)):g==="BT"&&(c.attr("y1",L),c.attr("x1",h),c.attr("y2",A),c.attr("x2",h)),G.push(h);const y=n.name,m=F(y),$=a.insert("rect"),l=a.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+o);l.node().appendChild(m);const i=m.getBBox();$.attr("class","branchLabelBkg label"+o).attr("rx",4).attr("ry",4).attr("x",-i.width-4-(B?.rotateCommitLabel===!0?30:0)).attr("y",-i.height/2+8).attr("width",i.width+18).attr("height",i.height+4),l.attr("transform","translate("+(-i.width-14-(B?.rotateCommitLabel===!0?30:0))+", "+(h-i.height/2-1)+")"),g==="TB"?($.attr("x",h-i.width/2-10).attr("y",0),l.attr("transform","translate("+(h-i.width/2-5)+", 0)")):g==="BT"?($.attr("x",h-i.width/2-10).attr("y",L),l.attr("transform","translate("+(h-i.width/2-5)+", "+L+")")):$.attr("transform","translate(-19, "+(h-i.height/2)+")")})},"drawBranches"),Xt=d(function(r,t,a,n,e){return b.set(r,{pos:t,index:a}),t+=50+(e?40:0)+(g==="TB"||g==="BT"?n.width/2:0),t},"setBranchPosition"),Zt=d(function(r,t,a,n){if(Ot(),u.debug("in gitgraph renderer",r+`
`,"id:",t,a),!B)throw new Error("GitGraph config not found");const e=B.rotateCommitLabel??!1,o=n.db;R=o.getCommits();const h=o.getBranchesAsObjArray();g=o.getDirection();const c=rt(`[id="${t}"]`);let y=0;h.forEach((m,$)=>{const l=F(m.name),i=c.append("g"),x=i.insert("g").attr("class","branchLabel"),p=x.insert("g").attr("class","label branch-label");p.node()?.appendChild(l);const q=l.getBBox();y=Xt(m.name,y,$,q,e),p.remove(),x.remove(),i.remove()}),S(c,R,!1),B.showBranches&&Qt(c,h),Jt(c,R),S(c,R,!0),et.insertTitle(c,"gitTitleText",B.titleTopMargin??0,o.getDiagramTitle()),ot(void 0,c,B.diagramPadding,B.useMaxWidth)},"draw"),tr={draw:Zt},rr=d(r=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(t=>`
        .branch-label${t} { fill: ${r["gitBranchLabel"+t]}; }
        .commit${t} { stroke: ${r["git"+t]}; fill: ${r["git"+t]}; }
        .commit-highlight${t} { stroke: ${r["gitInv"+t]}; fill: ${r["gitInv"+t]}; }
        .label${t}  { fill: ${r["git"+t]}; }
        .arrow${t} { stroke: ${r["git"+t]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${r.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelColor};}
  .commit-label-bkg { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${r.tagLabelFontSize}; fill: ${r.tagLabelColor};}
  .tag-label-bkg { fill: ${r.tagLabelBackground}; stroke: ${r.tagLabelBorder}; }
  .tag-hole { fill: ${r.textColor}; }

  .commit-merge {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
  }
  .commit-reverse {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${r.textColor};
  }
`,"getStyles"),er=rr,xr={parser:At,db:j,renderer:tr,styles:er};export{xr as diagram};
